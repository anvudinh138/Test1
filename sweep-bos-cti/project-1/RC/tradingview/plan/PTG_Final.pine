//@version=6
indicator("PTG Final – Push • Test • Go", overlay=true, max_bars_back=200)

// ===== Inputs =====
// Trading Pair Selection
pairSelection = input.string("XAU/USD", "Select Trading Pair", options=["EUR/USD", "XAU/USD"])

// Auto-configure based on selected pair
isPairEURUSD = pairSelection == "EUR/USD"
isPairXAUUSD = pairSelection == "XAU/USD"

// Auto pip size based on pair
pipSize = isPairEURUSD ? 0.0001 : 0.01

// Trend filter settings
useEMA      = input.bool(true,  "Lọc trend EMA34/55")
useVWAP     = input.bool(false, "Lọc trend VWAP (auto ON for Gold)")
lookback    = input.int(20,  "So sánh trong N nến", minval=10)

// Optimized Push criteria based on pair
pushRangePct= input.float(0.70,"Range ≥ 70% range lớn nhất N nến", step=0.05)
closePct    = input.float(0.65,"Close nằm ở 65–100% cực trị", step=0.05)
oppWickPct  = input.float(0.35,"Bóng ngược ≤ 35% range", step=0.05)
volHighMult = input.float(1.4, "Vol ≥ 1.4× SMA Vol", step=0.1)

testBars    = input.int(3, "Cho phép TEST trong 1–3 nến", minval=1, maxval=5)
pullbackMax = input.float(0.40,"Pullback ≤ 40% range PUSH", step=0.02)
volLowMult  = input.float(0.9, "Vol TEST ≤ 0.9× SMA Vol", step=0.05)

// Entry/exit settings with pair guidance
entryBufPip = input.float(0.05, "Đệm Entry (0.1 EUR, 0.05 Gold)", step=0.01)
slBufPip    = input.float(0.05, "Đệm SL (0.1 EUR, 0.05 Gold)", step=0.01)

// Scalping-optimized TP ratios
tpRatio1 = input.float(1.0, "TP1 ratio (1.0 EUR, 0.8 Gold)", step=0.1, minval=0.5)
tpRatio2 = input.float(2.0, "TP2 ratio (2.0 EUR, 1.5 Gold)", step=0.1, minval=1.0) 
tpRatio3 = input.float(3.0, "TP3 ratio (3.0 EUR, 2.5 Gold)", step=0.1, minval=2.0)

// Dynamic SL based on volatility
useDynamicSL = input.bool(false, "Dynamic SL based on ATR (keep simple)")
atrMultSL = input.float(0.5, "ATR multiplier for SL", step=0.1)

// ===== Core series =====
ema34 = ta.ema(close, 34)
ema55 = ta.ema(close, 55)
vwap  = ta.vwap
atr14 = ta.atr(14)

// Auto-apply VWAP for Gold pairs
actualUseVWAP = useVWAP or isPairXAUUSD
upOK = (not useEMA or ema34 > ema55) and (not actualUseVWAP or close > vwap)
dnOK = (not useEMA or ema34 < ema55) and (not actualUseVWAP or close < vwap)

// Auto-apply optimized parameters based on pair selection
actualVolHighMult = isPairXAUUSD ? math.max(volHighMult, 1.4) : volHighMult
actualPullbackMax = isPairXAUUSD ? math.min(pullbackMax, 0.35) : pullbackMax
actualEntryBuf = isPairXAUUSD ? math.min(entryBufPip, 0.05) : entryBufPip
actualSlBuf = isPairXAUUSD ? math.min(slBufPip, 0.05) : slBufPip
actualTP1 = isPairXAUUSD ? math.min(tpRatio1, 0.8) : tpRatio1
actualTP2 = isPairXAUUSD ? math.min(tpRatio2, 1.5) : tpRatio2
actualTP3 = isPairXAUUSD ? math.min(tpRatio3, 2.5) : tpRatio3
actualATRMult = isPairXAUUSD ? math.min(atrMultSL, 0.3) : atrMultSL

// Enhanced metrics for scalping
rng   = high - low
rngHi = ta.highest(rng, lookback)
volMA = ta.sma(volume, lookback)
rngMA = ta.sma(rng, lookback)

closePosHi = (close - low) / math.max(rng, 1e-6)
closePosLo = (high - close) / math.max(rng, 1e-6)
lowWick    = (math.min(open, close) - low) / math.max(rng, 1e-6)
upWick     = (high - math.max(open, close)) / math.max(rng, 1e-6)

bigRange = rng >= rngHi * pushRangePct
hiVol    = volume >= volMA * actualVolHighMult and volume > volume[1]

// Simple Push detection
pushUp = upOK and bigRange and hiVol and closePosHi >= closePct and upWick <= oppWickPct
pushDn = dnOK and bigRange and hiVol and closePosLo >= closePct and lowWick <= oppWickPct

plotshape(pushUp, title="Push Up", style=shape.triangleup, location=location.belowbar,
     color=color.new(color.lime, 0), size=size.tiny, text="P↑", textcolor=color.black)
plotshape(pushDn, title="Push Down", style=shape.triangledown, location=location.abovebar,
     color=color.new(color.red, 0), size=size.tiny, text="P↓", textcolor=color.white)

var bool  waitTest = false
var bool  longDir  = false
var int   iPush    = na
var float hiPush   = na
var float loPush   = na
var float rngPush  = na

if (pushUp or pushDn)
    waitTest := true
    longDir  := pushUp
    iPush    := bar_index
    hiPush   := high
    loPush   := low
    rngPush  := rng

win = waitTest and (bar_index - iPush) >= 1 and (bar_index - iPush) <= testBars

pullOKLong  = win and  longDir     and (hiPush - low)  <= actualPullbackMax * rngPush
pullOKShort = win and (not longDir) and (high  - loPush) <= actualPullbackMax * rngPush
lowVol      = volume <= volMA * volLowMult
smallRng    = rng <= rngMA * 0.8

testLong  = pullOKLong  and lowVol and smallRng
testShort = pullOKShort and lowVol and smallRng

plotshape(testLong,  title="Test Long",  style=shape.circle, location=location.belowbar,
     color=color.new(color.lime, 0), size=size.tiny, text="T", textcolor=color.black)
plotshape(testShort, title="Test Short", style=shape.circle, location=location.abovebar,
     color=color.new(color.red, 0), size=size.tiny, text="T", textcolor=color.white)

var float testHi = na
var float testLo = na
if testLong
    testHi := high
    testLo := low
if testShort
    testHi := high
    testLo := low

useHi = na(testHi) ? hiPush : testHi
useLo = na(testLo) ? loPush : testLo

buf   = actualEntryBuf * pipSize
slBuf = actualSlBuf    * pipSize

longEntry  = useHi + buf
shortEntry = useLo - buf

// Fix crossover warnings by calculating on every bar
longCross = ta.crossover(high, longEntry)
shortCross = ta.crossunder(low, shortEntry)

goLong  = waitTest and  longDir     and longCross
goShort = waitTest and (not longDir) and shortCross

// Enhanced SL calculation with optional dynamic ATR
baseSLLong  = (na(testLo) ? loPush : testLo) - slBuf
baseSLShort = (na(testHi) ? hiPush : testHi) + slBuf
atrSL = atr14 * actualATRMult

slLong  = useDynamicSL ? math.min(baseSLLong, longEntry - atrSL) : baseSLLong
slShort = useDynamicSL ? math.max(baseSLShort, shortEntry + atrSL) : baseSLShort

// Scalping-optimized TP levels using auto-optimized ratios
tp1L = longEntry  + pipSize * actualTP1
tp2L = longEntry  + pipSize * actualTP2
tp3L = longEntry  + pipSize * actualTP3
tp1S = shortEntry - pipSize * actualTP1
tp2S = shortEntry - pipSize * actualTP2
tp3S = shortEntry - pipSize * actualTP3

plotshape(goLong,  title="GO Long",  style=shape.labelup,   location=location.belowbar,
     color=color.new(color.lime, 0), text="GO", textcolor=color.black, size=size.small)
plotshape(goShort, title="GO Short", style=shape.labeldown, location=location.abovebar,
     color=color.new(color.red, 0),  text="GO", textcolor=color.white, size=size.small)

plot(goLong  ? slLong : na, title="SL Long",  style=plot.style_circles, color=color.orange)
plot(goShort ? slShort: na, title="SL Short", style=plot.style_circles, color=color.orange)
plot(goLong  ? longEntry  : na, title="Entry Long",  style=plot.style_linebr, color=color.green)
plot(goShort ? shortEntry : na, title="Entry Short", style=plot.style_linebr, color=color.maroon)
plot(goLong  ? tp1L : na, title="TP1 L", style=plot.style_linebr, color=color.green)
plot(goLong  ? tp2L : na, title="TP2 L", style=plot.style_linebr, color=color.green)
plot(goLong  ? tp3L : na, title="TP3 L", style=plot.style_linebr, color=color.green)
plot(goShort ? tp1S: na, title="TP1 S", style=plot.style_linebr, color=color.maroon)
plot(goShort ? tp2S: na, title="TP2 S", style=plot.style_linebr, color=color.maroon)
plot(goShort ? tp3S: na, title="TP3 S", style=plot.style_linebr, color=color.maroon)

if (goLong or goShort) or (win and (bar_index - iPush) == testBars)
    waitTest := false
    testHi := na
    testLo := na

// ===== Enhanced Alerts =====
alertcondition(goLong,  title="PTG Long Entry",  
     message="PTG Final: LONG Entry Signal - Check chart for levels")
alertcondition(goShort, title="PTG Short Entry", 
     message="PTG Final: SHORT Entry Signal - Check chart for levels")

// For webhook integration, use invisible plots to send data
plot(goLong ? longEntry : na, title="Long Entry Price", display=display.none)
plot(goLong ? slLong : na, title="Long SL Price", display=display.none)
plot(goLong ? tp1L : na, title="Long TP1 Price", display=display.none)
plot(goLong ? tp2L : na, title="Long TP2 Price", display=display.none)
plot(goLong ? tp3L : na, title="Long TP3 Price", display=display.none)

plot(goShort ? shortEntry : na, title="Short Entry Price", display=display.none)
plot(goShort ? slShort : na, title="Short SL Price", display=display.none)
plot(goShort ? tp1S : na, title="Short TP1 Price", display=display.none)
plot(goShort ? tp2S : na, title="Short TP2 Price", display=display.none)
plot(goShort ? tp3S : na, title="Short TP3 Price", display=display.none)

// ===== INFO TABLE =====
var table infoTable = table.new(position.bottom_right, 2, 6, bgcolor=color.white, border_width=1)
if barstate.islast
    table.cell(infoTable, 0, 0, "PTG Final", text_color=color.white, bgcolor=color.blue, text_size=size.small)
    table.cell(infoTable, 1, 0, pairSelection, text_color=color.white, bgcolor=color.blue, text_size=size.small)
    
    table.cell(infoTable, 0, 1, "Pip Size", text_color=color.black, text_size=size.tiny)
    table.cell(infoTable, 1, 1, str.tostring(pipSize, "#.#####"), text_color=color.black, text_size=size.tiny)
    
    table.cell(infoTable, 0, 2, "Vol Mult", text_color=color.black, text_size=size.tiny)
    table.cell(infoTable, 1, 2, str.tostring(actualVolHighMult, "#.#"), text_color=color.black, text_size=size.tiny)
    
    table.cell(infoTable, 0, 3, "Pullback", text_color=color.black, text_size=size.tiny)
    table.cell(infoTable, 1, 3, str.tostring(actualPullbackMax*100, "#") + "%", text_color=color.black, text_size=size.tiny)
    
    table.cell(infoTable, 0, 4, "TP Ratios", text_color=color.black, text_size=size.tiny)
    table.cell(infoTable, 1, 4, str.tostring(actualTP1, "#.#") + ":" + str.tostring(actualTP2, "#.#") + ":" + str.tostring(actualTP3, "#.#"), text_color=color.black, text_size=size.tiny)
    
    table.cell(infoTable, 0, 5, "VWAP Filter", text_color=color.black, text_size=size.tiny)
    table.cell(infoTable, 1, 5, actualUseVWAP ? "ON" : "OFF", text_color=actualUseVWAP ? color.green : color.red, text_size=size.tiny)
