//@version=6
strategy("PTG Final 10u – Last Resort", overlay=true, max_bars_back=200, 
         default_qty_type=strategy.percent_of_equity, default_qty_value=10,
         commission_type=strategy.commission.percent, commission_value=0,
         calc_on_every_tick=true, initial_capital=10)

// ===== FINAL ATTEMPT FOR 10u CAPITAL =====
pipSize     = input.float(0.01, "Pip size (XAUUSD=0.01)", step=0.01)
useEMA      = input.bool(false, "Lọc trend EMA34/55")
useVWAP     = input.bool(false, "Lọc trend VWAP")
lookback    = input.int(20,  "So sánh trong N nến", minval=10)

// Ultra-relaxed parameters
pushRangePct= input.float(0.50,"Range ≥ 50% range lớn nhất N nến", step=0.05)
closePct    = input.float(0.50,"Close nằm ở 50–100% cực trị", step=0.05)
oppWickPct  = input.float(0.50,"Bóng ngược ≤ 50% range", step=0.05)
volHighMult = input.float(1.0, "Vol ≥ 1.0× SMA Vol", step=0.1)

testBars    = input.int(10, "Cho phép TEST trong 1–10 nến", minval=1, maxval=20)
pullbackMax = input.float(0.80,"Pullback ≤ 80% range PUSH", step=0.02)
volLowMult  = input.float(1.5, "Vol TEST ≤ 1.5× SMA Vol", step=0.05)

entryBufPip = input.float(0.005, "Đệm Entry (pip)", step=0.001)
slBufPip    = input.float(0.005, "Đệm SL (pip)", step=0.001)
tpMultiplier = input.float(1.5, "TP multiplier", step=0.5, minval=0.5, maxval=3.0)

// Position sizing
riskPercent = input.float(10.0, "Risk per trade (%)", step=1.0, minval=1.0, maxval=50.0)

// ===== SIMPLIFIED CORE LOGIC =====
ema34 = ta.ema(close, 34)
ema55 = ta.ema(close, 55)
vwap  = ta.vwap

upOK = (not useEMA or ema34 > ema55) and (not useVWAP or close > vwap)
dnOK = (not useEMA or ema34 < ema55) and (not useVWAP or close < vwap)

rng   = high - low
rngHi = ta.highest(rng, lookback)
volMA = ta.sma(volume, lookback)
rngMA = ta.sma(rng, lookback)

closePosHi = (close - low) / math.max(rng, 1e-6)
closePosLo = (high - close) / math.max(rng, 1e-6)
lowWick    = (math.min(open, close) - low) / math.max(rng, 1e-6)
upWick     = (high - math.max(open, close)) / math.max(rng, 1e-6)

bigRange = rng >= rngHi * pushRangePct
hiVol    = volume >= volMA * volHighMult

// Simplified push detection
pushUp = upOK and bigRange and hiVol and closePosHi >= closePct and upWick <= oppWickPct
pushDn = dnOK and bigRange and hiVol and closePosLo >= closePct and lowWick <= oppWickPct

plotshape(pushUp, title="Push Up", style=shape.triangleup, location=location.belowbar,
     color=color.new(color.lime, 0), size=size.small, text="PUSH", textcolor=color.black)
plotshape(pushDn, title="Push Down", style=shape.triangledown, location=location.abovebar,
     color=color.new(color.red, 0), size=size.small, text="PUSH", textcolor=color.white)

var bool  waitTest = false
var bool  longDir  = false
var int   iPush    = na
var float hiPush   = na
var float loPush   = na
var float rngPush  = na

if (pushUp or pushDn)
    waitTest := true
    longDir  := pushUp
    iPush    := bar_index
    hiPush   := high
    loPush   := low
    rngPush  := rng

win = waitTest and (bar_index - iPush) >= 1 and (bar_index - iPush) <= testBars

pullOKLong  = win and  longDir     and (hiPush - low)  <= pullbackMax * rngPush
pullOKShort = win and (not longDir) and (high  - loPush) <= pullbackMax * rngPush
lowVol      = volume <= volMA * volLowMult
smallRng    = rng <= rngMA * 2.0  // Very relaxed

testLong  = pullOKLong  and lowVol and smallRng
testShort = pullOKShort and lowVol and smallRng

plotshape(testLong,  title="Test Long",  style=shape.circle, location=location.belowbar,
     color=color.new(color.lime, 0), size=size.small, text="TEST", textcolor=color.black)
plotshape(testShort, title="Test Short", style=shape.circle, location=location.abovebar,
     color=color.new(color.red, 0), size=size.small, text="TEST", textcolor=color.white)

// IMMEDIATE MARKET ENTRY - NO COMPLEX LOGIC
goLong  = testLong
goShort = testShort

// Simple SL/TP
slLong  = low - pipSize * 1
slShort = high + pipSize * 1
tp1L = close + pipSize * tpMultiplier
tp1S = close - pipSize * tpMultiplier

// ===== SIMPLE STRATEGY LOGIC =====
// Try different approach: No qty specification, let TradingView handle it
if (goLong and strategy.position_size == 0)
    strategy.entry("Long", strategy.long, comment="Final Long 10u")
    strategy.exit("Long Exit", "Long", limit=tp1L, stop=slLong, comment="Long Exit")

if (goShort and strategy.position_size == 0)
    strategy.entry("Short", strategy.short, comment="Final Short 10u")
    strategy.exit("Short Exit", "Short", limit=tp1S, stop=slShort, comment="Short Exit")

// Reset waitTest
if (goLong or goShort) or (win and (bar_index - iPush) == testBars)
    waitTest := false

// ===== VISUALIZATION =====
plotshape(goLong,  title="GO Long",  style=shape.labelup,   location=location.belowbar,
     color=color.new(color.lime, 0), text="FINAL↑", textcolor=color.black, size=size.large)
plotshape(goShort, title="GO Short", style=shape.labeldown, location=location.abovebar,
     color=color.new(color.red, 0),  text="FINAL↓", textcolor=color.white, size=size.large)

// ===== DEBUG TABLE =====
var int pushCount = 0
var int testCount = 0  
var int goCount = 0

if pushUp or pushDn
    pushCount += 1
if testLong or testShort
    testCount += 1
if goLong or goShort
    goCount += 1

var table debugTable = table.new(position.top_right, 2, 10, bgcolor=color.white, border_width=1)
if barstate.islast
    winRate = strategy.closedtrades > 0 ? strategy.wintrades / strategy.closedtrades * 100 : 0
    
    table.cell(debugTable, 0, 0, "FINAL 10u", text_color=color.white, bgcolor=color.blue, text_size=size.small)
    table.cell(debugTable, 1, 0, "Last Try", text_color=color.white, bgcolor=color.blue, text_size=size.small)
    
    table.cell(debugTable, 0, 1, "Push Signals", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 1, str.tostring(pushCount), text_color=color.blue, text_size=size.tiny)
    
    table.cell(debugTable, 0, 2, "Test Signals", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 2, str.tostring(testCount), text_color=color.orange, text_size=size.tiny)
    
    table.cell(debugTable, 0, 3, "GO Signals", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 3, str.tostring(goCount), text_color=color.purple, text_size=size.tiny)
    
    table.cell(debugTable, 0, 4, "Strategy Trades", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 4, str.tostring(strategy.closedtrades), text_color=color.red, text_size=size.tiny)
    
    table.cell(debugTable, 0, 5, "Open Trades", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 5, str.tostring(strategy.opentrades), text_color=color.green, text_size=size.tiny)
    
    table.cell(debugTable, 0, 6, "Position Size", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 6, str.tostring(strategy.position_size, "#.####"), text_color=color.blue, text_size=size.tiny)
    
    table.cell(debugTable, 0, 7, "Net P&L", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 7, str.tostring(strategy.netprofit, "#.####"), text_color=strategy.netprofit > 0 ? color.green : color.red, text_size=size.tiny)
    
    table.cell(debugTable, 0, 8, "Equity", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 8, "$" + str.tostring(strategy.equity, "#.##"), text_color=color.blue, text_size=size.tiny)
    
    table.cell(debugTable, 0, 9, "Risk %", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 9, str.tostring(riskPercent, "#") + "%", text_color=color.red, text_size=size.tiny)
