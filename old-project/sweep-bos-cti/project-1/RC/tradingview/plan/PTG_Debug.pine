//@version=6
indicator("PTG Debug – Push • Test • Go", overlay=true, max_bars_back=200)

// ===== Debug Inputs (Very Simple) =====
pipSize     = input.float(0.01, "Pip size (XAUUSD=0.01)", step=0.01)
useEMA      = input.bool(true,  "Lọc trend EMA34/55")
useVWAP     = input.bool(true, "Lọc trend VWAP (for Gold)")
lookback    = input.int(20,  "So sánh trong N nến", minval=10)

// Optimized settings for Gold (tighter for quality signals)
pushRangePct= input.float(0.70,"Range ≥ 70% range lớn nhất N nến", step=0.05)
closePct    = input.float(0.65,"Close nằm ở 65–100% cực trị", step=0.05)
oppWickPct  = input.float(0.35,"Bóng ngược ≤ 35% range", step=0.05)
volHighMult = input.float(1.4, "Vol ≥ 1.4× SMA Vol", step=0.1)

testBars    = input.int(3, "Cho phép TEST trong 1–3 nến", minval=1, maxval=5)
pullbackMax = input.float(0.40,"Pullback ≤ 40% range PUSH", step=0.02)
volLowMult  = input.float(0.9, "Vol TEST ≤ 0.9× SMA Vol", step=0.05)

entryBufPip = input.float(0.05, "Đệm Entry (pip)", step=0.01)
slBufPip    = input.float(0.05, "Đệm SL (pip)", step=0.01)

// Debug display
showDebug = input.bool(true, "Show debug info")

// ===== Core Logic =====
ema34 = ta.ema(close, 34)
ema55 = ta.ema(close, 55)
vwap  = ta.vwap

upOK = (not useEMA or ema34 > ema55) and (not useVWAP or close > vwap)
dnOK = (not useEMA or ema34 < ema55) and (not useVWAP or close < vwap)

rng   = high - low
rngHi = ta.highest(rng, lookback)
volMA = ta.sma(volume, lookback)
rngMA = ta.sma(rng, lookback)

closePosHi = (close - low) / math.max(rng, 1e-6)
closePosLo = (high - close) / math.max(rng, 1e-6)
lowWick    = (math.min(open, close) - low) / math.max(rng, 1e-6)
upWick     = (high - math.max(open, close)) / math.max(rng, 1e-6)

bigRange = rng >= rngHi * pushRangePct
hiVol    = volume >= volMA * volHighMult and volume > volume[1]

// Debug conditions
trendUpOK = (not useEMA or ema34 > ema55)
vwapUpOK = (not useVWAP or close > vwap)
trendDnOK = (not useEMA or ema34 < ema55)
vwapDnOK = (not useVWAP or close < vwap)

closeHighOK = closePosHi >= closePct
closeLowOK = closePosLo >= closePct
upWickOK = upWick <= oppWickPct
lowWickOK = lowWick <= oppWickPct

// Simple Push detection
pushUp = upOK and bigRange and hiVol and closePosHi >= closePct and upWick <= oppWickPct
pushDn = dnOK and bigRange and hiVol and closePosLo >= closePct and lowWick <= oppWickPct

plotshape(pushUp, title="Push Up", style=shape.triangleup, location=location.belowbar,
     color=color.new(color.lime, 0), size=size.tiny, text="P↑", textcolor=color.black)
plotshape(pushDn, title="Push Down", style=shape.triangledown, location=location.abovebar,
     color=color.new(color.red, 0), size=size.tiny, text="P↓", textcolor=color.white)

var bool  waitTest = false
var bool  longDir  = false
var int   iPush    = na
var float hiPush   = na
var float loPush   = na
var float rngPush  = na

if (pushUp or pushDn)
    waitTest := true
    longDir  := pushUp
    iPush    := bar_index
    hiPush   := high
    loPush   := low
    rngPush  := rng

win = waitTest and (bar_index - iPush) >= 1 and (bar_index - iPush) <= testBars

pullOKLong  = win and  longDir     and (hiPush - low)  <= pullbackMax * rngPush
pullOKShort = win and (not longDir) and (high  - loPush) <= pullbackMax * rngPush
lowVol      = volume <= volMA * volLowMult
smallRng    = rng <= rngMA * 0.8

testLong  = pullOKLong  and lowVol and smallRng
testShort = pullOKShort and lowVol and smallRng

plotshape(testLong,  title="Test Long",  style=shape.circle, location=location.belowbar,
     color=color.new(color.lime, 0), size=size.tiny, text="T", textcolor=color.black)
plotshape(testShort, title="Test Short", style=shape.circle, location=location.abovebar,
     color=color.new(color.red, 0), size=size.tiny, text="T", textcolor=color.white)

var float testHi = na
var float testLo = na
if testLong
    testHi := high
    testLo := low
if testShort
    testHi := high
    testLo := low

useHi = na(testHi) ? hiPush : testHi
useLo = na(testLo) ? loPush : testLo

buf   = entryBufPip * pipSize
slBuf = slBufPip    * pipSize

longEntry  = useHi + buf
shortEntry = useLo - buf

// Fix crossover warnings
longCross = ta.crossover(high, longEntry)
shortCross = ta.crossunder(low, shortEntry)

goLong  = waitTest and  longDir     and longCross
goShort = waitTest and (not longDir) and shortCross

slLong  = (na(testLo) ? loPush : testLo) - slBuf
slShort = (na(testHi) ? hiPush : testHi) + slBuf

tp1L = longEntry  + pipSize
tp2L = longEntry  + pipSize*2
tp3L = longEntry  + pipSize*3
tp1S = shortEntry - pipSize
tp2S = shortEntry - pipSize*2
tp3S = shortEntry - pipSize*3

plotshape(goLong,  title="GO Long",  style=shape.labelup,   location=location.belowbar,
     color=color.new(color.lime, 0), text="GO", textcolor=color.black, size=size.small)
plotshape(goShort, title="GO Short", style=shape.labeldown, location=location.abovebar,
     color=color.new(color.red, 0),  text="GO", textcolor=color.white, size=size.small)

plot(goLong  ? slLong : na, title="SL Long",  style=plot.style_circles, color=color.orange, linewidth=1)
plot(goShort ? slShort: na, title="SL Short", style=plot.style_circles, color=color.orange, linewidth=1)
plot(goLong  ? longEntry  : na, title="Entry Long",  style=plot.style_linebr, color=color.green, linewidth=1)
plot(goShort ? shortEntry : na, title="Entry Short", style=plot.style_linebr, color=color.maroon, linewidth=1)

if (goLong or goShort) or (win and (bar_index - iPush) == testBars)
    waitTest := false
    testHi := na
    testLo := na

// ===== DEBUG TABLE =====
var table debugTable = table.new(position.top_left, 2, 10, bgcolor=color.white, border_width=1)
if showDebug and barstate.islast
    table.cell(debugTable, 0, 0, "DEBUG INFO", text_color=color.white, bgcolor=color.red, text_size=size.small)
    table.cell(debugTable, 1, 0, "VALUE", text_color=color.white, bgcolor=color.red, text_size=size.small)
    
    table.cell(debugTable, 0, 1, "EMA34 > EMA55", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 1, trendUpOK ? "✓" : "✗", text_color=trendUpOK ? color.green : color.red, text_size=size.tiny)
    
    table.cell(debugTable, 0, 2, "Close > VWAP", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 2, vwapUpOK ? "✓" : "✗", text_color=vwapUpOK ? color.green : color.red, text_size=size.tiny)
    
    table.cell(debugTable, 0, 3, "Big Range", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 3, bigRange ? "✓" : "✗", text_color=bigRange ? color.green : color.red, text_size=size.tiny)
    
    table.cell(debugTable, 0, 4, "High Volume", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 4, hiVol ? "✓" : "✗", text_color=hiVol ? color.green : color.red, text_size=size.tiny)
    
    table.cell(debugTable, 0, 5, "Close High", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 5, closeHighOK ? "✓" : "✗", text_color=closeHighOK ? color.green : color.red, text_size=size.tiny)
    
    table.cell(debugTable, 0, 6, "Up Wick OK", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 6, upWickOK ? "✓" : "✗", text_color=upWickOK ? color.green : color.red, text_size=size.tiny)
    
    table.cell(debugTable, 0, 7, "Current Range", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 7, str.tostring(rng, "#.##"), text_color=color.black, text_size=size.tiny)
    
    table.cell(debugTable, 0, 8, "Max Range 20", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 8, str.tostring(rngHi, "#.##"), text_color=color.black, text_size=size.tiny)
    
    table.cell(debugTable, 0, 9, "Vol vs SMA", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 9, str.tostring(volume/volMA, "#.##") + "x", text_color=color.black, text_size=size.tiny)

// Alerts
alertcondition(pushUp, title="PTG Push Up", message="PUSH UP detected!")
alertcondition(pushDn, title="PTG Push Down", message="PUSH DOWN detected!")
alertcondition(goLong, title="PTG GO Long", message="GO LONG signal!")
alertcondition(goShort, title="PTG GO Short", message="GO SHORT signal!")
