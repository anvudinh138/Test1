//@version=6
strategy("PTG Ultra Debug – Find The Problem", overlay=true, max_bars_back=200, 
         default_qty_type=strategy.fixed, default_qty_value=1,
         commission_type=strategy.commission.percent, commission_value=0,
         calc_on_every_tick=true, initial_capital=10000)

// ===== ULTRA RELAXED FOR DEBUGGING =====
pairSelection = input.string("XAU/USD", "Trading Pair", options=["EUR/USD", "XAU/USD"])
isPairEURUSD = pairSelection == "EUR/USD"
isPairXAUUSD = pairSelection == "XAU/USD"

pipSize = isPairEURUSD ? 0.0001 : 0.01
useEMA = input.bool(false, "Lọc trend EMA34/55")
useVWAP = input.bool(false, "Lọc trend VWAP")
lookback = input.int(20, "So sánh trong N nến", minval=10)

// EXTREMELY RELAXED - Should get signals on any timeframe
pushRangePct = input.float(0.30, "Range ≥ 30% range lớn nhất N nến", step=0.05)
closePct = input.float(0.30, "Close nằm ở 30–100% cực trị", step=0.05)
oppWickPct = input.float(0.70, "Bóng ngược ≤ 70% range", step=0.05)
volHighMult = input.float(0.8, "Vol ≥ 0.8× SMA Vol", step=0.1)

testBars = input.int(20, "Cho phép TEST trong 1–20 nến", minval=1, maxval=50)
pullbackMax = input.float(0.95, "Pullback ≤ 95% range PUSH", step=0.02)
volLowMult = input.float(2.0, "Vol TEST ≤ 2.0× SMA Vol", step=0.05)

entryBufPip = input.float(0.01, "Đệm Entry (pip)", step=0.01)
slBufPip = input.float(0.01, "Đệm SL (pip)", step=0.01)
tpMultiplier = input.float(2.0, "TP multiplier", step=0.5, minval=1.0, maxval=5.0)

riskPercent = input.float(2.0, "Risk per trade (%)", step=0.5, minval=0.5, maxval=10.0)

// ===== CORE LOGIC =====
ema34 = ta.ema(close, 34)
ema55 = ta.ema(close, 55)
vwap = ta.vwap

upOK = (not useEMA or ema34 > ema55) and (not useVWAP or close > vwap)
dnOK = (not useEMA or ema34 < ema55) and (not useVWAP or close < vwap)

rng = high - low
rngHi = ta.highest(rng, lookback)
volMA = ta.sma(volume, lookback)
rngMA = ta.sma(rng, lookback)

closePosHi = (close - low) / math.max(rng, 1e-6)
closePosLo = (high - close) / math.max(rng, 1e-6)
lowWick = (math.min(open, close) - low) / math.max(rng, 1e-6)
upWick = (high - math.max(open, close)) / math.max(rng, 1e-6)

// Debug individual conditions
bigRange = rng >= rngHi * pushRangePct
hiVol = volume >= volMA * volHighMult
volIncreasing = volume > volume[1]

// Debug push conditions step by step
pushCondition1 = upOK
pushCondition2 = bigRange
pushCondition3 = hiVol
pushCondition4 = closePosHi >= closePct
pushCondition5 = upWick <= oppWickPct

pushUp = pushCondition1 and pushCondition2 and pushCondition3 and pushCondition4 and pushCondition5
pushDn = dnOK and bigRange and hiVol and closePosLo >= closePct and lowWick <= oppWickPct

// Show ALL potential signals
plotshape(bigRange, title="Big Range", style=shape.diamond, location=location.bottom, color=color.new(color.blue, 0), size=size.tiny, text="R", textcolor=color.white)
plotshape(hiVol, title="High Vol", style=shape.square, location=location.bottom, color=color.new(color.purple, 0), size=size.tiny, text="V", textcolor=color.white)
plotshape(pushUp, title="Push Up", style=shape.triangleup, location=location.belowbar, color=color.new(color.lime, 0), size=size.normal, text="PUSH↑", textcolor=color.black)
plotshape(pushDn, title="Push Down", style=shape.triangledown, location=location.abovebar, color=color.new(color.red, 0), size=size.normal, text="PUSH↓", textcolor=color.white)

var bool waitTest = false
var bool longDir = false
var int iPush = na
var float hiPush = na
var float loPush = na
var float rngPush = na

if (pushUp or pushDn)
    waitTest := true
    longDir := pushUp
    iPush := bar_index
    hiPush := high
    loPush := low
    rngPush := rng

win = waitTest and (bar_index - iPush) >= 1 and (bar_index - iPush) <= testBars

pullOKLong = win and longDir and (hiPush - low) <= pullbackMax * rngPush
pullOKShort = win and (not longDir) and (high - loPush) <= pullbackMax * rngPush
lowVol = volume <= volMA * volLowMult
smallRng = rng <= rngMA * 3.0  // Very relaxed

testLong = pullOKLong and lowVol and smallRng
testShort = pullOKShort and lowVol and smallRng

plotshape(testLong, title="Test Long", style=shape.circle, location=location.belowbar, color=color.new(color.lime, 0), size=size.normal, text="TEST", textcolor=color.black)
plotshape(testShort, title="Test Short", style=shape.circle, location=location.abovebar, color=color.new(color.red, 0), size=size.normal, text="TEST", textcolor=color.white)

var float testHi = na
var float testLo = na
if testLong
    testHi := high
    testLo := low
if testShort
    testHi := high
    testLo := low

useHi = na(testHi) ? hiPush : testHi
useLo = na(testLo) ? loPush : testLo

buf = entryBufPip * pipSize
slBuf = slBufPip * pipSize

longEntry = useHi + buf
shortEntry = useLo - buf

// IMMEDIATE ENTRY
goLong = testLong
goShort = testShort

slLong = (na(testLo) ? loPush : testLo) - slBuf
slShort = (na(testHi) ? hiPush : testHi) + slBuf

tp1L = longEntry + pipSize * tpMultiplier
tp1S = shortEntry - pipSize * tpMultiplier

// ===== STRATEGY EXECUTION =====
getLotSize(entryPrice, stopPrice) =>
    riskAmount = strategy.equity * riskPercent / 100
    pipRisk = math.abs(entryPrice - stopPrice) / pipSize
    if pipRisk > 0
        lotSize = riskAmount / (pipRisk * (isPairEURUSD ? 1.0 : 10.0))
        math.max(0.01, math.min(lotSize, 10.0))
    else
        1.0

if (goLong and strategy.position_size == 0)
    qty = getLotSize(longEntry, slLong)
    strategy.entry("Long", strategy.long, qty=qty, comment="Ultra Debug Long")
    strategy.exit("Long Exit", "Long", limit=tp1L, stop=slLong, comment="Long Exit")

if (goShort and strategy.position_size == 0)
    qty = getLotSize(shortEntry, slShort)
    strategy.entry("Short", strategy.short, qty=qty, comment="Ultra Debug Short")
    strategy.exit("Short Exit", "Short", limit=tp1S, stop=slShort, comment="Short Exit")

// Visual Signals
plotshape(goLong, title="GO Long", style=shape.labelup, location=location.belowbar, color=color.new(color.lime, 0), text="ENTRY", textcolor=color.black, size=size.large)
plotshape(goShort, title="GO Short", style=shape.labeldown, location=location.abovebar, color=color.new(color.red, 0), text="ENTRY", textcolor=color.white, size=size.large)

plot(goLong ? slLong : na, title="SL Long", style=plot.style_linebr, color=color.red, linewidth=3)
plot(goShort ? slShort : na, title="SL Short", style=plot.style_linebr, color=color.red, linewidth=3)
plot(goLong ? tp1L : na, title="TP Long", style=plot.style_linebr, color=color.green, linewidth=3)
plot(goShort ? tp1S : na, title="TP Short", style=plot.style_linebr, color=color.green, linewidth=3)

// Reset waitTest
if (goLong or goShort) or (win and (bar_index - iPush) == testBars)
    waitTest := false
    testHi := na
    testLo := na

// ===== ULTRA DEBUG COUNTERS =====
var int bigRangeCount = 0
var int hiVolCount = 0
var int pushCount = 0
var int testCount = 0
var int goCount = 0

if bigRange
    bigRangeCount += 1
if hiVol
    hiVolCount += 1
if pushUp or pushDn
    pushCount += 1
if testLong or testShort
    testCount += 1
if goLong or goShort
    goCount += 1

// ===== DETAILED DEBUG TABLE =====
var table debugTable = table.new(position.top_right, 2, 12, bgcolor=color.white, border_width=1)
if barstate.islast
    winRate = strategy.closedtrades > 0 ? strategy.wintrades / strategy.closedtrades * 100 : 0
    
    table.cell(debugTable, 0, 0, "ULTRA DEBUG", text_color=color.white, bgcolor=color.red, text_size=size.small)
    table.cell(debugTable, 1, 0, "ANALYSIS", text_color=color.white, bgcolor=color.red, text_size=size.small)
    
    table.cell(debugTable, 0, 1, "Big Range", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 1, str.tostring(bigRangeCount), text_color=bigRangeCount > 0 ? color.green : color.red, text_size=size.tiny)
    
    table.cell(debugTable, 0, 2, "High Volume", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 2, str.tostring(hiVolCount), text_color=hiVolCount > 0 ? color.green : color.red, text_size=size.tiny)
    
    table.cell(debugTable, 0, 3, "Push Signals", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 3, str.tostring(pushCount), text_color=pushCount > 0 ? color.green : color.red, text_size=size.tiny)
    
    table.cell(debugTable, 0, 4, "Test Signals", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 4, str.tostring(testCount), text_color=testCount > 0 ? color.green : color.red, text_size=size.tiny)
    
    table.cell(debugTable, 0, 5, "GO Signals", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 5, str.tostring(goCount), text_color=goCount > 0 ? color.green : color.red, text_size=size.tiny)
    
    table.cell(debugTable, 0, 6, "Strategy Trades", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 6, str.tostring(strategy.closedtrades), text_color=strategy.closedtrades > 0 ? color.green : color.red, text_size=size.tiny)
    
    table.cell(debugTable, 0, 7, "Current Range", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 7, str.tostring(rng, "#.##"), text_color=color.black, text_size=size.tiny)
    
    table.cell(debugTable, 0, 8, "Max Range", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 8, str.tostring(rngHi, "#.##"), text_color=color.black, text_size=size.tiny)
    
    table.cell(debugTable, 0, 9, "Vol vs SMA", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 9, str.tostring(volume/volMA, "#.##") + "x", text_color=color.black, text_size=size.tiny)
    
    table.cell(debugTable, 0, 10, "Settings", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 10, "ULTRA RELAXED", text_color=color.green, text_size=size.tiny)
    
    table.cell(debugTable, 0, 11, "Timeframe", text_color=color.black, text_size=size.tiny)
    table.cell(debugTable, 1, 11, timeframe.period, text_color=color.blue, text_size=size.tiny)
