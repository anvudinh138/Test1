//@version=6
indicator("PTG Scalping Alerts – No Miss Setup", overlay=true, max_bars_back=200)

// ===== SCALPING ALERT SYSTEM =====
// Based on proven H1 logic (54.2% win rate, profit factor 1.10)

pairSelection = input.string("XAU/USD", "Trading Pair", options=["EUR/USD", "XAU/USD"])
isPairEURUSD = pairSelection == "EUR/USD"
isPairXAUUSD = pairSelection == "XAU/USD"

pipSize = isPairEURUSD ? 0.0001 : 0.01
useEMA = input.bool(false, "Lọc trend EMA34/55")
useVWAP = input.bool(false, "Lọc trend VWAP")
lookback = input.int(20, "So sánh trong N nến", minval=10)

// H1 optimized parameters
pushRangePct = input.float(0.60, "Range ≥ 60% range lớn nhất N nến", step=0.05)
closePct = input.float(0.60, "Close nằm ở 60–100% cực trị", step=0.05)
oppWickPct = input.float(0.40, "Bóng ngược ≤ 40% range", step=0.05)
volHighMult = input.float(1.2, "Vol ≥ 1.2× SMA Vol", step=0.1)

testBars = input.int(5, "Cho phép TEST trong 1–5 nến", minval=1, maxval=10)
pullbackMax = input.float(0.50, "Pullback ≤ 50% range PUSH", step=0.02)
volLowMult = input.float(1.0, "Vol TEST ≤ 1.0× SMA Vol", step=0.05)

entryBufPip = input.float(0.01, "Đệm Entry (pip)", step=0.01)
slBufPip = input.float(0.01, "Đệm SL (pip)", step=0.01)
tpMultiplier = input.float(2.0, "TP multiplier", step=0.5, minval=1.0, maxval=5.0)

// Alert settings
alertOnPush = input.bool(true, "🔔 Alert on PUSH (Preparation)")
alertOnTest = input.bool(true, "🚨 Alert on TEST (Entry Signal)")
alertOnEntry = input.bool(true, "⚡ Alert on GO (Execute Now)")

// Account settings for position sizing in alerts
accountSize = input.float(10.0, "Account Size ($)", step=10.0, minval=10.0, maxval=10000.0)
riskPercent = input.float(2.0, "Risk per trade (%)", step=0.5, minval=0.5, maxval=10.0)

// ===== CORE LOGIC =====
ema34 = ta.ema(close, 34)
ema55 = ta.ema(close, 55)
vwap = ta.vwap

upOK = (not useEMA or ema34 > ema55) and (not useVWAP or close > vwap)
dnOK = (not useEMA or ema34 < ema55) and (not useVWAP or close < vwap)

rng = high - low
rngHi = ta.highest(rng, lookback)
volMA = ta.sma(volume, lookback)
rngMA = ta.sma(rng, lookback)

closePosHi = (close - low) / math.max(rng, 1e-6)
closePosLo = (high - close) / math.max(rng, 1e-6)
lowWick = (math.min(open, close) - low) / math.max(rng, 1e-6)
upWick = (high - math.max(open, close)) / math.max(rng, 1e-6)

bigRange = rng >= rngHi * pushRangePct
hiVol = volume >= volMA * volHighMult and volume > volume[1]

// Push detection
pushUp = upOK and bigRange and hiVol and closePosHi >= closePct and upWick <= oppWickPct
pushDn = dnOK and bigRange and hiVol and closePosLo >= closePct and lowWick <= oppWickPct

plotshape(pushUp, title="Push Up", style=shape.triangleup, location=location.belowbar,
     color=color.new(color.yellow, 0), size=size.normal, text="PUSH↑", textcolor=color.black)
plotshape(pushDn, title="Push Down", style=shape.triangledown, location=location.abovebar,
     color=color.new(color.orange, 0), size=size.normal, text="PUSH↓", textcolor=color.white)

var bool waitTest = false
var bool longDir = false
var int iPush = na
var float hiPush = na
var float loPush = na
var float rngPush = na

if (pushUp or pushDn)
    waitTest := true
    longDir := pushUp
    iPush := bar_index
    hiPush := high
    loPush := low
    rngPush := rng

win = waitTest and (bar_index - iPush) >= 1 and (bar_index - iPush) <= testBars

pullOKLong = win and longDir and (hiPush - low) <= pullbackMax * rngPush
pullOKShort = win and (not longDir) and (high - loPush) <= pullbackMax * rngPush
lowVol = volume <= volMA * volLowMult
smallRng = rng <= rngMA * 1.2

testLong = pullOKLong and lowVol and smallRng
testShort = pullOKShort and lowVol and smallRng

plotshape(testLong, title="Test Long", style=shape.circle, location=location.belowbar,
     color=color.new(color.lime, 0), size=size.normal, text="TEST", textcolor=color.black)
plotshape(testShort, title="Test Short", style=shape.circle, location=location.abovebar,
     color=color.new(color.red, 0), size=size.normal, text="TEST", textcolor=color.white)

var float testHi = na
var float testLo = na
if testLong
    testHi := high
    testLo := low
if testShort
    testHi := high
    testLo := low

useHi = na(testHi) ? hiPush : testHi
useLo = na(testLo) ? loPush : testLo

buf = entryBufPip * pipSize
slBuf = slBufPip * pipSize

longEntry = useHi + buf
shortEntry = useLo - buf

// ENTRY SIGNALS
goLong = testLong
goShort = testShort

slLong = (na(testLo) ? loPush : testLo) - slBuf
slShort = (na(testHi) ? hiPush : testHi) + slBuf

tp1L = longEntry + pipSize * tpMultiplier
tp1S = shortEntry - pipSize * tpMultiplier

// ===== SCALPING VISUALS =====
plotshape(goLong, title="GO Long", style=shape.labelup, location=location.belowbar,
     color=color.new(color.lime, 0), text="GO", textcolor=color.black, size=size.tiny)
plotshape(goShort, title="GO Short", style=shape.labeldown, location=location.abovebar,
     color=color.new(color.red, 0), text="GO", textcolor=color.white, size=size.tiny)

plot(goLong ? slLong : na, title="SL Long", style=plot.style_linebr, color=color.red, linewidth=2)
plot(goShort ? slShort : na, title="SL Short", style=plot.style_linebr, color=color.red, linewidth=2)
plot(goLong ? tp1L : na, title="TP Long", style=plot.style_linebr, color=color.green, linewidth=2)
plot(goShort ? tp1S : na, title="TP Short", style=plot.style_linebr, color=color.green, linewidth=2)

// ===== POSITION SIZING CALCULATION =====
getLotSize(entryPrice, stopPrice) =>
    riskAmount = accountSize * riskPercent / 100
    pipRisk = math.abs(entryPrice - stopPrice) / pipSize
    if pipRisk > 0
        lotSize = riskAmount / (pipRisk * (isPairEURUSD ? 1.0 : 10.0))
        math.max(0.01, math.min(lotSize, 10.0))
    else
        0.01

// ===== SIMPLE ALERT SYSTEM =====

// 1. PUSH ALERTS
alertcondition(alertOnPush and pushUp, title="PTG PUSH UP", message="PTG PUSH UP DETECTED")
alertcondition(alertOnPush and pushDn, title="PTG PUSH DOWN", message="PTG PUSH DOWN DETECTED")

// 2. TEST ALERTS  
alertcondition(alertOnTest and testLong, title="PTG TEST LONG", message="PTG TEST LONG READY")
alertcondition(alertOnTest and testShort, title="PTG TEST SHORT", message="PTG TEST SHORT READY")

// 3. GO ALERTS
alertcondition(alertOnEntry and goLong, title="PTG GO LONG", message="PTG GO LONG - BUY NOW")
alertcondition(alertOnEntry and goShort, title="PTG GO SHORT", message="PTG GO SHORT - SELL NOW")

// Hidden plots for alert message data
plot(goLong ? longEntry : goShort ? shortEntry : na, title="Entry Level", display=display.none)
plot(goLong ? slLong : goShort ? slShort : na, title="SL Level", display=display.none)
plot(goLong ? tp1L : goShort ? tp1S : na, title="TP Level", display=display.none)

// Calculate and plot position sizing info
currentLotSize = goLong ? getLotSize(longEntry, slLong) : goShort ? getLotSize(shortEntry, slShort) : 0.01
currentRiskAmount = accountSize * riskPercent / 100

plot(goLong or goShort ? currentLotSize : na, title="Lot Size", display=display.none)
plot(goLong or goShort ? currentRiskAmount : na, title="Risk Amount", display=display.none)

// ===== ALERT STATUS TABLE =====
var table alertTable = table.new(position.top_right, 2, 8, bgcolor=color.white, border_width=1)
if barstate.islast
    table.cell(alertTable, 0, 0, "SCALPING ALERTS", text_color=color.white, bgcolor=color.blue, text_size=size.normal)
    table.cell(alertTable, 1, 0, "Status", text_color=color.white, bgcolor=color.blue, text_size=size.normal)
    
    table.cell(alertTable, 0, 1, "🔔 Push Alerts", text_color=color.black, text_size=size.small)
    table.cell(alertTable, 1, 1, alertOnPush ? "ON" : "OFF", text_color=alertOnPush ? color.green : color.red, text_size=size.small)
    
    table.cell(alertTable, 0, 2, "🚨 Test Alerts", text_color=color.black, text_size=size.small)
    table.cell(alertTable, 1, 2, alertOnTest ? "ON" : "OFF", text_color=alertOnTest ? color.green : color.red, text_size=size.small)
    
    table.cell(alertTable, 0, 3, "⚡ Entry Alerts", text_color=color.black, text_size=size.small)
    table.cell(alertTable, 1, 3, alertOnEntry ? "ON" : "OFF", text_color=alertOnEntry ? color.green : color.red, text_size=size.small)
    
    table.cell(alertTable, 0, 4, "Account Size", text_color=color.black, text_size=size.tiny)
    table.cell(alertTable, 1, 4, "$" + str.tostring(accountSize, "#"), text_color=color.blue, text_size=size.tiny)
    
    table.cell(alertTable, 0, 5, "Risk %", text_color=color.black, text_size=size.tiny)
    table.cell(alertTable, 1, 5, str.tostring(riskPercent, "#.#") + "%", text_color=color.orange, text_size=size.tiny)
    
    table.cell(alertTable, 0, 6, "Expected WR", text_color=color.black, text_size=size.tiny)
    table.cell(alertTable, 1, 6, "54.2%", text_color=color.green, text_size=size.tiny)
    
    table.cell(alertTable, 0, 7, "Timeframe", text_color=color.black, text_size=size.tiny)
    table.cell(alertTable, 1, 7, "H1 Best", text_color=color.purple, text_size=size.tiny)

// Reset waitTest
if (goLong or goShort) or (win and (bar_index - iPush) == testBars)
    waitTest := false
    testHi := na
    testLo := na
