//@version=6
strategy("PTG Strategy Simple – Push • Test • Go", overlay=true, max_bars_back=200, 
         default_qty_type=strategy.percent_of_equity, default_qty_value=100,
         commission_type=strategy.commission.cash_per_contract, commission_value=0.02,
         calc_on_every_tick=true)

// ===== Simple Inputs (Like original script) =====
pipSize     = input.float(0.01, "Pip size (XAUUSD=0.01)", step=0.01)
useEMA      = input.bool(true,  "Lọc trend EMA34/55")
useVWAP     = input.bool(true, "Lọc trend VWAP (for Gold)")
lookback    = input.int(20,  "So sánh trong N nến", minval=10)

// Very relaxed settings to get trades
pushRangePct= input.float(0.60,"Range ≥ 60% range lớn nhất N nến", step=0.05)
closePct    = input.float(0.60,"Close nằm ở 60–100% cực trị", step=0.05)
oppWickPct  = input.float(0.40,"Bóng ngược ≤ 40% range", step=0.05)
volHighMult = input.float(1.2, "Vol ≥ 1.2× SMA Vol", step=0.1)

testBars    = input.int(3, "Cho phép TEST trong 1–3 nến", minval=1, maxval=5)
pullbackMax = input.float(0.50,"Pullback ≤ 50% range PUSH", step=0.02)
volLowMult  = input.float(1.0, "Vol TEST ≤ 1.0× SMA Vol", step=0.05)

entryBufPip = input.float(0.05, "Đệm Entry (pip)", step=0.01)
slBufPip    = input.float(0.05, "Đệm SL (pip)", step=0.01)

// Strategy settings
riskPercent = input.float(2.0, "Risk per trade (%)", step=0.1, minval=0.1, maxval=10.0)
usePartialTPs = input.bool(false, "Use partial TPs (keep simple)")

// ===== Core Logic (Exactly like original) =====
ema34 = ta.ema(close, 34)
ema55 = ta.ema(close, 55)
vwap  = ta.vwap

upOK = (not useEMA or ema34 > ema55) and (not useVWAP or close > vwap)
dnOK = (not useEMA or ema34 < ema55) and (not useVWAP or close < vwap)

rng   = high - low
rngHi = ta.highest(rng, lookback)
volMA = ta.sma(volume, lookback)
rngMA = ta.sma(rng, lookback)

closePosHi = (close - low) / math.max(rng, 1e-6)
closePosLo = (high - close) / math.max(rng, 1e-6)
lowWick    = (math.min(open, close) - low) / math.max(rng, 1e-6)
upWick     = (high - math.max(open, close)) / math.max(rng, 1e-6)

bigRange = rng >= rngHi * pushRangePct
hiVol    = volume >= volMA * volHighMult and volume > volume[1]

// Simple Push detection
pushUp = upOK and bigRange and hiVol and closePosHi >= closePct and upWick <= oppWickPct
pushDn = dnOK and bigRange and hiVol and closePosLo >= closePct and lowWick <= oppWickPct

plotshape(pushUp, title="Push Up", style=shape.triangleup, location=location.belowbar,
     color=color.new(color.lime, 0), size=size.tiny, text="P↑", textcolor=color.black)
plotshape(pushDn, title="Push Down", style=shape.triangledown, location=location.abovebar,
     color=color.new(color.red, 0), size=size.tiny, text="P↓", textcolor=color.white)

var bool  waitTest = false
var bool  longDir  = false
var int   iPush    = na
var float hiPush   = na
var float loPush   = na
var float rngPush  = na

if (pushUp or pushDn)
    waitTest := true
    longDir  := pushUp
    iPush    := bar_index
    hiPush   := high
    loPush   := low
    rngPush  := rng

win = waitTest and (bar_index - iPush) >= 1 and (bar_index - iPush) <= testBars

pullOKLong  = win and  longDir     and (hiPush - low)  <= pullbackMax * rngPush
pullOKShort = win and (not longDir) and (high  - loPush) <= pullbackMax * rngPush
lowVol      = volume <= volMA * volLowMult
smallRng    = rng <= rngMA * 0.8

testLong  = pullOKLong  and lowVol and smallRng
testShort = pullOKShort and lowVol and smallRng

plotshape(testLong,  title="Test Long",  style=shape.circle, location=location.belowbar,
     color=color.new(color.lime, 0), size=size.tiny, text="T", textcolor=color.black)
plotshape(testShort, title="Test Short", style=shape.circle, location=location.abovebar,
     color=color.new(color.red, 0), size=size.tiny, text="T", textcolor=color.white)

var float testHi = na
var float testLo = na
if testLong
    testHi := high
    testLo := low
if testShort
    testHi := high
    testLo := low

useHi = na(testHi) ? hiPush : testHi
useLo = na(testLo) ? loPush : testLo

buf   = entryBufPip * pipSize
slBuf = slBufPip    * pipSize

longEntry  = useHi + buf
shortEntry = useLo - buf

// Fix crossover warnings by calculating on every bar
longCross = ta.crossover(high, longEntry)
shortCross = ta.crossunder(low, shortEntry)

goLong  = waitTest and  longDir     and longCross
goShort = waitTest and (not longDir) and shortCross

slLong  = (na(testLo) ? loPush : testLo) - slBuf
slShort = (na(testHi) ? hiPush : testHi) + slBuf

tp1L = longEntry  + pipSize
tp2L = longEntry  + pipSize*2
tp3L = longEntry  + pipSize*3
tp1S = shortEntry - pipSize
tp2S = shortEntry - pipSize*2
tp3S = shortEntry - pipSize*3

// ===== SIMPLE STRATEGY LOGIC =====
// Simple position size calculation
getRiskBasedQty(entryPrice, stopPrice) =>
    riskAmount = strategy.equity * riskPercent / 100
    priceRisk = math.abs(entryPrice - stopPrice)
    math.max(1, math.floor(riskAmount / priceRisk))

// Entry conditions (no concurrent position limits for simplicity)
if (goLong and strategy.position_size == 0)
    qty = getRiskBasedQty(longEntry, slLong)
    strategy.entry("Long", strategy.long, qty=qty, stop=longEntry, comment="PTG Long")
    
    if usePartialTPs
        strategy.exit("Long TP1", "Long", limit=tp1L, qty_percent=50, comment="TP1")
        strategy.exit("Long TP2", "Long", limit=tp2L, comment="TP2")
    else
        strategy.exit("Long TP", "Long", limit=tp1L, comment="TP Hit")
    
    strategy.exit("Long SL", "Long", stop=slLong, comment="SL Hit")

if (goShort and strategy.position_size == 0)
    qty = getRiskBasedQty(shortEntry, slShort)
    strategy.entry("Short", strategy.short, qty=qty, stop=shortEntry, comment="PTG Short")
    
    if usePartialTPs
        strategy.exit("Short TP1", "Short", limit=tp1S, qty_percent=50, comment="TP1")
        strategy.exit("Short TP2", "Short", limit=tp2S, comment="TP2")
    else
        strategy.exit("Short TP", "Short", limit=tp1S, comment="TP Hit")
    
    strategy.exit("Short SL", "Short", stop=slShort, comment="SL Hit")

// Reset waitTest after entry or timeout
if (goLong or goShort) or (win and (bar_index - iPush) == testBars)
    waitTest := false
    testHi := na
    testLo := na

// ===== VISUALIZATION =====
plotshape(goLong,  title="GO Long",  style=shape.labelup,   location=location.belowbar,
     color=color.new(color.lime, 0), text="GO", textcolor=color.black, size=size.small)
plotshape(goShort, title="GO Short", style=shape.labeldown, location=location.abovebar,
     color=color.new(color.red, 0),  text="GO", textcolor=color.white, size=size.small)

plot(goLong  ? slLong : na, title="SL Long",  style=plot.style_circles, color=color.orange)
plot(goShort ? slShort: na, title="SL Short", style=plot.style_circles, color=color.orange)
plot(goLong  ? longEntry  : na, title="Entry Long",  style=plot.style_linebr, color=color.green)
plot(goShort ? shortEntry : na, title="Entry Short", style=plot.style_linebr, color=color.maroon)

// Show current stats
totalTrades = strategy.closedtrades
winningTrades = strategy.wintrades
winRate = totalTrades > 0 ? winningTrades / totalTrades * 100 : 0

var table statsTable = table.new(position.top_right, 2, 4, bgcolor=color.white, border_width=1)
if barstate.islast
    table.cell(statsTable, 0, 0, "Stats", text_color=color.white, bgcolor=color.blue, text_size=size.small)
    table.cell(statsTable, 1, 0, "Value", text_color=color.white, bgcolor=color.blue, text_size=size.small)
    
    table.cell(statsTable, 0, 1, "Total Trades", text_color=color.black, text_size=size.tiny)
    table.cell(statsTable, 1, 1, str.tostring(totalTrades), text_color=color.black, text_size=size.tiny)
    
    table.cell(statsTable, 0, 2, "Win Rate", text_color=color.black, text_size=size.tiny)
    table.cell(statsTable, 1, 2, str.tostring(winRate, "#.#") + "%", text_color=color.black, text_size=size.tiny)
    
    table.cell(statsTable, 0, 3, "Net P&L", text_color=color.black, text_size=size.tiny)
    table.cell(statsTable, 1, 3, str.tostring(strategy.netprofit, "#.##"), text_color=strategy.netprofit > 0 ? color.green : color.red, text_size=size.tiny)
