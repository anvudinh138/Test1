//@version=6
strategy("PTG M1 Scalping – 800+ Entries", overlay=true, max_bars_back=200, 
         default_qty_type=strategy.fixed, default_qty_value=1,
         commission_type=strategy.commission.percent, commission_value=0,
         calc_on_every_tick=true, initial_capital=10000)

// ===== M1/M5 SCALPING OPTIMIZED =====
pairSelection = input.string("XAU/USD", "Trading Pair", options=["EUR/USD", "XAU/USD"])
isPairEURUSD = pairSelection == "EUR/USD"
isPairXAUUSD = pairSelection == "XAU/USD"

pipSize = isPairEURUSD ? 0.0001 : 0.01
useEMA = input.bool(false, "Lọc trend EMA34/55")
useVWAP = input.bool(false, "Lọc trend VWAP")
lookback = input.int(20, "So sánh trong N nến", minval=10)

// ULTRA LOOSE FOR M1/M5 SCALPING - 800+ ENTRIES
pushRangePct = input.float(0.20, "Range ≥ 20% range lớn nhất N nến", step=0.05)
closePct = input.float(0.30, "Close nằm ở 30–100% cực trị", step=0.05)
oppWickPct = input.float(0.80, "Bóng ngược ≤ 80% range", step=0.05)
volHighMult = input.float(0.8, "Vol ≥ 0.8× SMA Vol", step=0.1)

testBars = input.int(10, "Cho phép TEST trong 1–10 nến", minval=1, maxval=20)
pullbackMax = input.float(0.80, "Pullback ≤ 80% range PUSH", step=0.02)
volLowMult = input.float(2.0, "Vol TEST ≤ 2.0× SMA Vol", step=0.05)

entryBufPip = input.float(0.1, "Đệm Entry (pip)", step=0.1)
slBufPip = input.float(0.1, "Đệm SL (pip)", step=0.1)
tpMultiplier = input.float(1.5, "TP multiplier", step=0.5, minval=1.0, maxval=5.0)

riskPercent = input.float(2.0, "Risk per trade (%)", step=0.5, minval=0.5, maxval=10.0)

// Enhanced Alert System
enableAlerts = input.bool(true, "Enable Alerts")
alertMode = input.string("Entry Only", "Alert Mode", options=["Entry Only", "Push + Entry", "All Signals"])
enableInstantAlert = input.bool(true, "Instant Alert (no anti-spam)")

// ===== CORE LOGIC =====
ema34 = ta.ema(close, 34)
ema55 = ta.ema(close, 55)
vwap = ta.vwap

upOK = (not useEMA or ema34 > ema55) and (not useVWAP or close > vwap)
dnOK = (not useEMA or ema34 < ema55) and (not useVWAP or close < vwap)

rng = high - low
rngHi = ta.highest(rng, lookback)
volMA = ta.sma(volume, lookback)
rngMA = ta.sma(rng, lookback)

closePosHi = (close - low) / math.max(rng, 1e-6)
closePosLo = (high - close) / math.max(rng, 1e-6)
lowWick = (math.min(open, close) - low) / math.max(rng, 1e-6)
upWick = (high - math.max(open, close)) / math.max(rng, 1e-6)

bigRange = rng >= rngHi * pushRangePct
hiVol = volume >= volMA * volHighMult and volume > volume[1]

// ULTRA LOOSE PUSH CONDITIONS
pushUp = upOK and bigRange and hiVol and closePosHi >= closePct and upWick <= oppWickPct
pushDn = dnOK and bigRange and hiVol and closePosLo >= closePct and lowWick <= oppWickPct

plotshape(pushUp, title="Push Up", style=shape.triangleup, location=location.belowbar, color=color.new(color.lime, 0), size=size.small, text="PUSH", textcolor=color.black)
plotshape(pushDn, title="Push Down", style=shape.triangledown, location=location.abovebar, color=color.new(color.red, 0), size=size.small, text="PUSH", textcolor=color.white)

var bool waitTest = false
var bool longDir = false
var int iPush = na
var float hiPush = na
var float loPush = na
var float rngPush = na

if (pushUp or pushDn)
    waitTest := true
    longDir := pushUp
    iPush := bar_index
    hiPush := high
    loPush := low
    rngPush := rng

win = waitTest and (bar_index - iPush) >= 1 and (bar_index - iPush) <= testBars

pullOKLong = win and longDir and (hiPush - low) <= pullbackMax * rngPush
pullOKShort = win and (not longDir) and (high - loPush) <= pullbackMax * rngPush
lowVol = volume <= volMA * volLowMult
smallRng = rng <= rngMA * 2.0

testLong = pullOKLong and lowVol and smallRng
testShort = pullOKShort and lowVol and smallRng

plotshape(testLong, title="Test Long", style=shape.circle, location=location.belowbar, color=color.new(color.blue, 0), size=size.tiny, text="T", textcolor=color.white)
plotshape(testShort, title="Test Short", style=shape.circle, location=location.abovebar, color=color.new(color.blue, 0), size=size.tiny, text="T", textcolor=color.white)

var float testHi = na
var float testLo = na
if testLong
    testHi := high
    testLo := low
if testShort
    testHi := high
    testLo := low

useHi = na(testHi) ? hiPush : testHi
useLo = na(testLo) ? loPush : testLo

buf = entryBufPip * pipSize
slBuf = slBufPip * pipSize

longEntry = useHi + buf
shortEntry = useLo - buf

goLong = testLong
goShort = testShort

slLong = (na(testLo) ? loPush : testLo) - slBuf
slShort = (na(testHi) ? hiPush : testHi) + slBuf

longRiskPips = (longEntry - slLong) / pipSize
shortRiskPips = (slShort - shortEntry) / pipSize

tp1L = longEntry + longRiskPips * tpMultiplier * pipSize
tp1S = shortEntry - shortRiskPips * tpMultiplier * pipSize

// ===== ANTI-SPAM LOGIC =====
var int lastAlertBar = 0
var string lastAlertDirection = ""

canAlert(direction) =>
    enableInstantAlert or (bar_index - lastAlertBar) >= 5 or lastAlertDirection != direction

// ===== STRATEGY EXECUTION =====
getLotSize(entryPrice, stopPrice) =>
    riskAmount = strategy.equity * riskPercent / 100
    pipRisk = math.abs(entryPrice - stopPrice) / pipSize
    if pipRisk > 0
        lotSize = riskAmount / (pipRisk * (isPairEURUSD ? 1.0 : 10.0))
        math.max(0.01, math.min(lotSize, 10.0))
    else
        1.0

// Smart alerts with anti-spam
var bool smartGoLong = false
var bool smartGoShort = false

if goLong
    smartGoLong := canAlert("LONG")
    if smartGoLong
        lastAlertBar := bar_index
        lastAlertDirection := "LONG"

if goShort
    smartGoShort := canAlert("SHORT")
    if smartGoShort
        lastAlertBar := bar_index
        lastAlertDirection := "SHORT"

if (smartGoLong and strategy.position_size == 0)
    qty = getLotSize(longEntry, slLong)
    strategy.entry("Long", strategy.long, qty=qty, comment="M1 Scalp Long")
    strategy.exit("Long Exit", "Long", limit=tp1L, stop=slLong, comment="Long Exit")

if (smartGoShort and strategy.position_size == 0)
    qty = getLotSize(shortEntry, slShort)
    strategy.entry("Short", strategy.short, qty=qty, comment="M1 Scalp Short")
    strategy.exit("Short Exit", "Short", limit=tp1S, stop=slShort, comment="Short Exit")

// ===== ENHANCED ALERTS =====
if enableAlerts and smartGoLong
    alert("🚀 PTG LONG M1 - " + pairSelection + " | Entry:" + str.tostring(longEntry, "#.###") + " | SL:" + str.tostring(slLong, "#.###") + " | TP:" + str.tostring(tp1L, "#.###") + " | Risk:" + str.tostring(longRiskPips, "#.#") + "pips | WR:>50%", alert.freq_once_per_bar)

if enableAlerts and smartGoShort
    alert("🔻 PTG SHORT M1 - " + pairSelection + " | Entry:" + str.tostring(shortEntry, "#.###") + " | SL:" + str.tostring(slShort, "#.###") + " | TP:" + str.tostring(tp1S, "#.###") + " | Risk:" + str.tostring(shortRiskPips, "#.#") + "pips | WR:>50%", alert.freq_once_per_bar)

if enableAlerts and alertMode != "Entry Only"
    if pushUp and canAlert("PUSH_UP")
        alert("📈 PTG PUSH UP - " + pairSelection + " | Watch for pullback test", alert.freq_once_per_bar)
        lastAlertBar := bar_index
        lastAlertDirection := "PUSH_UP"
    
    if pushDn and canAlert("PUSH_DOWN")
        alert("📉 PTG PUSH DOWN - " + pairSelection + " | Watch for pullback test", alert.freq_once_per_bar)
        lastAlertBar := bar_index
        lastAlertDirection := "PUSH_DOWN"

// Visual Signals
plotshape(smartGoLong, title="GO Long", style=shape.labelup, location=location.belowbar, color=color.new(color.lime, 0), text="LONG", textcolor=color.black, size=size.normal)
plotshape(smartGoShort, title="GO Short", style=shape.labeldown, location=location.abovebar, color=color.new(color.red, 0), text="SHORT", textcolor=color.white, size=size.normal)

plot(smartGoLong ? longEntry : na, title="Entry Long", style=plot.style_linebr, color=color.blue, linewidth=2)
plot(smartGoShort ? shortEntry : na, title="Entry Short", style=plot.style_linebr, color=color.blue, linewidth=2)
plot(smartGoLong ? slLong : na, title="SL Long", style=plot.style_linebr, color=color.red, linewidth=2)
plot(smartGoShort ? slShort : na, title="SL Short", style=plot.style_linebr, color=color.red, linewidth=2)
plot(smartGoLong ? tp1L : na, title="TP Long", style=plot.style_linebr, color=color.green, linewidth=2)
plot(smartGoShort ? tp1S : na, title="TP Short", style=plot.style_linebr, color=color.green, linewidth=2)

// Reset waitTest
if (goLong or goShort) or (win and (bar_index - iPush) == testBars)
    waitTest := false
    testHi := na
    testLo := na

// ===== RESULTS TABLE =====
var table resultsTable = table.new(position.top_right, 2, 10, bgcolor=color.white, border_width=1)
if barstate.islast
    winRate = strategy.closedtrades > 0 ? strategy.wintrades / strategy.closedtrades * 100 : 0
    
    table.cell(resultsTable, 0, 0, "PTG M1 SCALPING", text_color=color.white, bgcolor=color.blue, text_size=size.small)
    table.cell(resultsTable, 1, 0, "RESULTS", text_color=color.white, bgcolor=color.blue, text_size=size.small)
    
    table.cell(resultsTable, 0, 1, "Total Trades", text_color=color.black, text_size=size.tiny)
    table.cell(resultsTable, 1, 1, str.tostring(strategy.closedtrades), text_color=strategy.closedtrades > 0 ? color.green : color.red, text_size=size.tiny)
    
    table.cell(resultsTable, 0, 2, "Win Rate", text_color=color.black, text_size=size.tiny)
    table.cell(resultsTable, 1, 2, str.tostring(winRate, "#.#") + "%", text_color=winRate >= 50 ? color.green : color.red, text_size=size.tiny)
    
    table.cell(resultsTable, 0, 3, "Profit Factor", text_color=color.black, text_size=size.tiny)
    table.cell(resultsTable, 1, 3, str.tostring(strategy.grossprofit/math.max(strategy.grossloss, 1), "#.##"), text_color=color.black, text_size=size.tiny)
    
    table.cell(resultsTable, 0, 4, "Net P&L", text_color=color.black, text_size=size.tiny)
    table.cell(resultsTable, 1, 4, "$" + str.tostring(strategy.netprofit, "#"), text_color=strategy.netprofit > 0 ? color.green : color.red, text_size=size.tiny)
    
    table.cell(resultsTable, 0, 5, "Risk/Trade", text_color=color.black, text_size=size.tiny)
    table.cell(resultsTable, 1, 5, str.tostring(riskPercent, "#.#") + "%", text_color=color.black, text_size=size.tiny)
    
    table.cell(resultsTable, 0, 6, "Alerts", text_color=color.black, text_size=size.tiny)
    table.cell(resultsTable, 1, 6, enableAlerts ? "ENHANCED" : "OFF", text_color=enableAlerts ? color.green : color.red, text_size=size.tiny)
    
    table.cell(resultsTable, 0, 7, "Mode", text_color=color.black, text_size=size.tiny)
    table.cell(resultsTable, 1, 7, "M1 SCALPING", text_color=color.orange, text_size=size.tiny)
    
    table.cell(resultsTable, 0, 8, "Settings", text_color=color.black, text_size=size.tiny)
    table.cell(resultsTable, 1, 8, "ULTRA LOOSE", text_color=color.green, text_size=size.tiny)
    
    table.cell(resultsTable, 0, 9, "Last Alert", text_color=color.black, text_size=size.tiny)
    table.cell(resultsTable, 1, 9, lastAlertDirection != "" ? lastAlertDirection : "NONE", text_color=color.blue, text_size=size.tiny)
