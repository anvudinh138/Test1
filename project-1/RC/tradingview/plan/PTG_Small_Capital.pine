//@version=6
strategy("PTG Small Capital – 10-100u", overlay=true, max_bars_back=200, 
         default_qty_type=strategy.cash, default_qty_value=1,
         commission_type=strategy.commission.percent, commission_value=0,
         calc_on_every_tick=true)

// ===== SMALL CAPITAL OPTIMIZED SETTINGS =====
pipSize     = input.float(0.01, "Pip size (XAUUSD=0.01)", step=0.01)
useEMA      = input.bool(true,  "Lọc trend EMA34/55")
useVWAP     = input.bool(false, "Lọc trend VWAP")
lookback    = input.int(20,  "So sánh trong N nến", minval=10)

// Balanced parameters for small capital
pushRangePct= input.float(0.70,"Range ≥ 70% range lớn nhất N nến", step=0.05)
closePct    = input.float(0.70,"Close nằm ở 70–100% cực trị", step=0.05)
oppWickPct  = input.float(0.30,"Bóng ngược ≤ 30% range", step=0.05)
volHighMult = input.float(1.5, "Vol ≥ 1.5× SMA Vol", step=0.1)

testBars    = input.int(3, "Cho phép TEST trong 1–3 nến", minval=1, maxval=5)
pullbackMax = input.float(0.35,"Pullback ≤ 35% range PUSH", step=0.02)
volLowMult  = input.float(0.8, "Vol TEST ≤ 0.8× SMA Vol", step=0.05)

entryBufPip = input.float(0.02, "Đệm Entry (pip)", step=0.01)
slBufPip    = input.float(0.02, "Đệm SL (pip)", step=0.01)

// Small capital settings
cashPerTrade = input.float(1.0, "Cash per trade ($1 for small capital)", step=0.5, minval=0.1, maxval=10.0)
tpMultiplier = input.float(3.0, "TP multiplier (3.0 = 3 pip TP)", step=0.5, minval=1.0, maxval=5.0)

// ===== Core Logic =====
ema34 = ta.ema(close, 34)
ema55 = ta.ema(close, 55)
vwap  = ta.vwap

upOK = (not useEMA or ema34 > ema55) and (not useVWAP or close > vwap)
dnOK = (not useEMA or ema34 < ema55) and (not useVWAP or close < vwap)

rng   = high - low
rngHi = ta.highest(rng, lookback)
volMA = ta.sma(volume, lookback)
rngMA = ta.sma(rng, lookback)

closePosHi = (close - low) / math.max(rng, 1e-6)
closePosLo = (high - close) / math.max(rng, 1e-6)
lowWick    = (math.min(open, close) - low) / math.max(rng, 1e-6)
upWick     = (high - math.max(open, close)) / math.max(rng, 1e-6)

bigRange = rng >= rngHi * pushRangePct
hiVol    = volume >= volMA * volHighMult and volume > volume[1]

// Push detection
pushUp = upOK and bigRange and hiVol and closePosHi >= closePct and upWick <= oppWickPct
pushDn = dnOK and bigRange and hiVol and closePosLo >= closePct and lowWick <= oppWickPct

plotshape(pushUp, title="Push Up", style=shape.triangleup, location=location.belowbar,
     color=color.new(color.lime, 0), size=size.tiny, text="P↑", textcolor=color.black)
plotshape(pushDn, title="Push Down", style=shape.triangledown, location=location.abovebar,
     color=color.new(color.red, 0), size=size.tiny, text="P↓", textcolor=color.white)

var bool  waitTest = false
var bool  longDir  = false
var int   iPush    = na
var float hiPush   = na
var float loPush   = na
var float rngPush  = na

if (pushUp or pushDn)
    waitTest := true
    longDir  := pushUp
    iPush    := bar_index
    hiPush   := high
    loPush   := low
    rngPush  := rng

win = waitTest and (bar_index - iPush) >= 1 and (bar_index - iPush) <= testBars

pullOKLong  = win and  longDir     and (hiPush - low)  <= pullbackMax * rngPush
pullOKShort = win and (not longDir) and (high  - loPush) <= pullbackMax * rngPush
lowVol      = volume <= volMA * volLowMult
smallRng    = rng <= rngMA * 0.8

testLong  = pullOKLong  and lowVol and smallRng
testShort = pullOKShort and lowVol and smallRng

plotshape(testLong,  title="Test Long",  style=shape.circle, location=location.belowbar,
     color=color.new(color.lime, 0), size=size.tiny, text="T", textcolor=color.black)
plotshape(testShort, title="Test Short", style=shape.circle, location=location.abovebar,
     color=color.new(color.red, 0), size=size.tiny, text="T", textcolor=color.white)

var float testHi = na
var float testLo = na
if testLong
    testHi := high
    testLo := low
if testShort
    testHi := high
    testLo := low

useHi = na(testHi) ? hiPush : testHi
useLo = na(testLo) ? loPush : testLo

buf   = entryBufPip * pipSize
slBuf = slBufPip    * pipSize

longEntry  = useHi + buf
shortEntry = useLo - buf

// Calculate crossover/crossunder
longCross  = ta.crossover(high, longEntry)
shortCross = ta.crossunder(low, shortEntry)

goLong  = waitTest and longDir and longCross
goShort = waitTest and (not longDir) and shortCross

// SL/TP calculations
slLong  = (na(testLo) ? loPush : testLo) - slBuf
slShort = (na(testHi) ? hiPush : testHi) + slBuf

tp1L = longEntry  + pipSize * tpMultiplier
tp1S = shortEntry - pipSize * tpMultiplier

// ===== STRATEGY LOGIC FOR SMALL CAPITAL =====
// Use fixed cash amount per trade
tradeQty = 1  // Will use default_qty_value from strategy declaration

if (goLong and strategy.position_size == 0)
    strategy.entry("Long", strategy.long, qty=tradeQty, comment="Small Cap Long")
    strategy.exit("Long Exit", "Long", limit=tp1L, stop=slLong, comment="Long Exit")

if (goShort and strategy.position_size == 0)
    strategy.entry("Short", strategy.short, qty=tradeQty, comment="Small Cap Short")
    strategy.exit("Short Exit", "Short", limit=tp1S, stop=slShort, comment="Short Exit")

// Reset waitTest
if (goLong or goShort) or (win and (bar_index - iPush) == testBars)
    waitTest := false
    testHi := na
    testLo := na

// ===== VISUALIZATION =====
plotshape(goLong,  title="GO Long",  style=shape.labelup,   location=location.belowbar,
     color=color.new(color.lime, 0), text="$↑", textcolor=color.black, size=size.small)
plotshape(goShort, title="GO Short", style=shape.labeldown, location=location.abovebar,
     color=color.new(color.red, 0),  text="$↓", textcolor=color.white, size=size.small)

plot(goLong  ? slLong : na, title="SL Long",  style=plot.style_circles, color=color.orange)
plot(goShort ? slShort: na, title="SL Short", style=plot.style_circles, color=color.orange)
plot(goLong  ? tp1L : na, title="TP Long", style=plot.style_linebr, color=color.lime)
plot(goShort ? tp1S: na, title="TP Short", style=plot.style_linebr, color=color.red)

// ===== DEBUG TABLE =====
var int pushCount = 0
var int testCount = 0  
var int goCount = 0

if pushUp or pushDn
    pushCount += 1
if testLong or testShort
    testCount += 1
if goLong or goShort
    goCount += 1

var table statsTable = table.new(position.top_right, 2, 9, bgcolor=color.white, border_width=1)
if barstate.islast
    winRate = strategy.closedtrades > 0 ? strategy.wintrades / strategy.closedtrades * 100 : 0
    profitFactor = strategy.grossprofit > 0 and strategy.grossloss > 0 ? strategy.grossprofit / strategy.grossloss : 0
    
    table.cell(statsTable, 0, 0, "Small Capital", text_color=color.white, bgcolor=color.orange, text_size=size.small)
    table.cell(statsTable, 1, 0, "Stats", text_color=color.white, bgcolor=color.orange, text_size=size.small)
    
    table.cell(statsTable, 0, 1, "Push→Test→GO", text_color=color.black, text_size=size.tiny)
    table.cell(statsTable, 1, 1, str.tostring(pushCount) + "→" + str.tostring(testCount) + "→" + str.tostring(goCount), text_color=color.blue, text_size=size.tiny)
    
    table.cell(statsTable, 0, 2, "Total Trades", text_color=color.black, text_size=size.tiny)
    table.cell(statsTable, 1, 2, str.tostring(strategy.closedtrades), text_color=color.blue, text_size=size.tiny)
    
    table.cell(statsTable, 0, 3, "Win Rate", text_color=color.black, text_size=size.tiny)
    table.cell(statsTable, 1, 3, str.tostring(winRate, "#.#") + "%", text_color=color.black, text_size=size.tiny)
    
    table.cell(statsTable, 0, 4, "Profit Factor", text_color=color.black, text_size=size.tiny)
    table.cell(statsTable, 1, 4, str.tostring(profitFactor, "#.##"), text_color=profitFactor > 1 ? color.green : color.red, text_size=size.tiny)
    
    table.cell(statsTable, 0, 5, "Net P&L", text_color=color.black, text_size=size.tiny)
    table.cell(statsTable, 1, 5, str.tostring(strategy.netprofit, "#.##"), text_color=strategy.netprofit > 0 ? color.green : color.red, text_size=size.tiny)
    
    table.cell(statsTable, 0, 6, "Cash/Trade", text_color=color.black, text_size=size.tiny)
    table.cell(statsTable, 1, 6, "$" + str.tostring(cashPerTrade, "#.#"), text_color=color.green, text_size=size.tiny)
    
    table.cell(statsTable, 0, 7, "Equity", text_color=color.black, text_size=size.tiny)
    table.cell(statsTable, 1, 7, "$" + str.tostring(strategy.equity, "#"), text_color=color.blue, text_size=size.tiny)
    
    table.cell(statsTable, 0, 8, "Type", text_color=color.black, text_size=size.tiny)
    table.cell(statsTable, 1, 8, "Cash-based", text_color=color.orange, text_size=size.tiny)
